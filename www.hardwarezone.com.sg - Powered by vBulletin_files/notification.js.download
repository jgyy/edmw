 var HwzNotification = new Class({	
	
	options: {
		mode: 'vertical',
		wrapper: false,
		hideOverflow: true,
		resetHeight: false,
		daysRemainClosed: 365,
		numberVisible: 2,
		closeButtonClass: '.close',
		classDefault: 'site-notif',
		classLastRow: 'site-notif-last'
	},
	
	allNotification: [],
	
	hiddenNotification: [],
	
	showNotification: [],
	
	totalNotificationJs: 0,
	
	initialize: function(elements) {

		if (elements.length <= 0) {
			return;
		}

		while (elements.length > 0) {			
			this.initiate(elements.shift());			
		};
		
	},
	
	initiate: function(obj) {
		var ids = obj.id;

		var element = $(ids);

		if (obj.cookieName != '') {
			var cookieExist = Cookie.read(obj.cookieName);
			if (!!cookieExist) {
				element.dispose();
				return;
			}
		}
		
		if (this.showNotification.length > 0) {
			this.showNotification[this.showNotification.length - 1].swapClass(this.options.classLastRow, this.options.classDefault);
		}
		element.swapClass(this.options.classDefault, this.options.classLastRow);
		this.allNotification.push(element);		
		
		element.set('slide', { mode: this.options.mode });
		
		element.getElements('a').addEvent('click', function(e){ e.stopPropagation(); });

		var oCloseButton = element.getElements('.close');
		if (oCloseButton.length) {
			oCloseButton.addEvent('click', (function(element) {
				return function() {
					this.closeBar(element);
					if (!!obj.cookieName) {
						var nDuration = 365;
						if ('cookieDuration' in obj) {
							nDuration = ~~obj.cookieDuration;
							if (nDuration < 1 || nDuration > 365) nDuration = 365;
						}
						Cookie.write (obj.cookieName, 1, { path: '/', duration: nDuration });
					}
				}
			})(element).bind(this));
		} else {
			element.addEvent('click', (function(element) {
				return function() {
					this.closeBar(element);
				}
			})(element).bind(this));
		}
		
		if (element.hasClass('site-notif-autoclose')) {
			this.closeBar.delay(6000, this, element);
		}
		
		this.showNotification.push(element);		
		
		if (this.showNotification.length > this.options.numberVisible) {
			//move from shown stack to hidden stack
			this.hiddenNotification.push(this.showNotification.shift().slide('hide'));			
		}		
	},
	
	closeBar: function(paramDiv) {
		var idx = this.showNotification.indexOf(paramDiv);
		this.showNotification.splice(idx, 1);
		var lastNotif = (this.showNotification.length > 0 ? this.showNotification[this.showNotification.length - 1] : false);
		var classDefault = this.options.classDefault;
		var classLastRow = this.options.classLastRow;		
		
		paramDiv.set('slide', { mode: this.options.mode,
			onComplete: function(){						
				if (!!lastNotif) {
					lastNotif.swapClass(classDefault, classLastRow);					
				}
			}
		});
		
		paramDiv.slide('out');
		if (this.hiddenNotification.length > 0) {
			var hid = this.hiddenNotification.pop();
			// to handle, if only one notif showing, but still have hidden notif to show
			if (!lastNotif) {
				hid.set('slide', { mode: this.options.mode,
					onComplete: function(){						
						hid.swapClass(classDefault, classLastRow);						
					}
				});
			}
			/////////////////////////////////////////////////////////////////////////////
			hid.slide('in');
			this.showNotification.unshift(hid);
		}
				
	},
	
	closeAll: function() {
		
		if (this.showNotification.length > 0) {
			var noti = this.showNotification.shift();
			var closeObj = this;
			if (this.showNotification.length > 0) {
				noti.set('slide', { mode: this.options.mode,
					onComplete: function(){						
						closeObj.closeAll();					
					}
				});
			}
			noti.slide('out');
		}
	},

	appendNotice: function(newNotif, prefix) { // newNotif is object
		// message, closeButton, type, cookieName, autoclose
	
		if (!newNotif.hasOwnProperty('message') || (newNotif.message == '')) {
			return;
		}
		
		var nMsg = newNotif.message;
		
		var cName = (newNotif.hasOwnProperty('cookieName') ? newNotif.cookieName : '');
		var cDuration = (newNotif.hasOwnProperty('cookieDuration') ? newNotif.cookieDuration : '');
				
		var nType = '';
		if (newNotif.hasOwnProperty('type')) {
			var typeOpt = new Array('normal','maintenance','warning');
			if (typeOpt.indexOf(newNotif.type) != -1) {
				nType = newNotif.type;
			}
		}
		
		var nCloseBtn = (newNotif.hasOwnProperty('closeButton') ? newNotif.closeButton : false);
		
		var nAutoClose = (newNotif.hasOwnProperty('autoclose') ? newNotif.autoclose : '');
					
		var className = 'site-notif';
		
		if (nType != '') {
			className += ' site-notif-' + nType;
		}
		if (nAutoClose != '') {
			className += ' site-notif-autoclose';
		}
		
		this.totalNotificationJs++;
		
		prefix = typeof prefix !== 'undefined' ? prefix : '';
		var id = (prefix == '') ? "site-notif-new-" + this.totalNotificationJs : prefix + "site-notif-new-" + this.totalNotificationJs;
		
		var initObj = {
			id: id,
			cookieName: cName,
			cookieDuration: cDuration
		};
		
		var newElement = new Element('div', {id: id, 'class': className});
		var newMsg = new Element('span', {text: ' ' + nMsg});
		var sMsg = newMsg.get('html');
		sMsg = sMsg.replace(/\[a=([^"\]]+)\]/, '<a href="$1">').replace('[/a]', '</a>');
		newMsg.set('html', sMsg);
		
		var container_id = (prefix == '') ? "hwz-notification-container" : prefix + "-hwz-notification-container";
		$(container_id).adopt(newElement);
		
		var newIcon = new Element('img', {'src':'/img/core/gradients/icon_notif_' + (['warning','maintenance'].indexOf(nType) < 0 ? 'normal' : 'warning') + '.png', 'class':'icon-notif'});
		newElement.adopt(newIcon, newMsg);
		
		if (nCloseBtn !== false) {
			var buttonLabel = 'close';
			if (typeof nCloseBtn == "string") {
				buttonLabel = nCloseBtn;
			}
			var buttonClass = 'close';
			var newBtn = new Element('span', {'class': buttonClass, title: buttonLabel, html:'&#215;'});
			newElement.adopt(newBtn);
		}
		
		this.initiate(initObj);
				
	}

});
